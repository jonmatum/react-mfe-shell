import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import Button from '../Button';

describe('Button', () => {
  // Basic rendering tests
  describe('Rendering', () => {
    it('renders correctly with default props', () => {
      render(<Button>Click me</Button>);
      const button = screen.getByRole('button', { name: /click me/i });
      expect(button).toBeInTheDocument();
      expect(button).toHaveClass('bg-primary-600'); // primary variant
    });

    it('renders with custom className', () => {
      render(<Button className="custom-class">Test</Button>);
      const button = screen.getByRole('button');
      expect(button).toHaveClass('custom-class');
    });

    it('renders children correctly', () => {
      render(
        <Button>
          <span>Complex</span> Content
        </Button>
      );
      expect(screen.getByText('Complex')).toBeInTheDocument();
      expect(screen.getByText('Content')).toBeInTheDocument();
    });

    it('renders with left icon', () => {
      const icon = <span data-testid="left-icon">←</span>;
      render(<Button leftIcon={icon}>With Icon</Button>);
      expect(screen.getByTestId('left-icon')).toBeInTheDocument();
    });

    it('renders with right icon', () => {
      const icon = <span data-testid="right-icon">→</span>;
      render(<Button rightIcon={icon}>With Icon</Button>);
      expect(screen.getByTestId('right-icon')).toBeInTheDocument();
    });

    it('renders full width correctly', () => {
      render(<Button fullWidth>Full Width</Button>);
      const button = screen.getByRole('button');
      expect(button).toHaveClass('w-full');
    });
  });

  // Variant tests
  describe('Variants', () => {
    const variants = ['primary', 'secondary', 'ghost', 'danger', 'success', 'warning'] as const;

    variants.forEach(variant => {
      it(`renders ${variant} variant correctly`, () => {
        render(<Button variant={variant}>{variant}</Button>);
        const button = screen.getByRole('button');

        switch (variant) {
          case 'primary':
            expect(button).toHaveClass('bg-primary-600');
            break;
          case 'secondary':
            expect(button).toHaveClass('bg-surface-secondary');
            break;
          case 'ghost':
            expect(button).toHaveClass('text-text-primary');
            break;
          case 'danger':
            expect(button).toHaveClass('bg-danger-600');
            break;
          case 'success':
            expect(button).toHaveClass('bg-success-600');
            break;
          case 'warning':
            expect(button).toHaveClass('bg-warning-600');
            break;
        }
      });
    });
  });

  // Size tests
  describe('Sizes', () => {
    const sizes = ['xs', 'sm', 'md', 'lg', 'xl'] as const;

    sizes.forEach(size => {
      it(`renders ${size} size correctly`, () => {
        render(<Button size={size}>{size}</Button>);
        const button = screen.getByRole('button');

        switch (size) {
          case 'xs':
            expect(button).toHaveClass('px-2', 'py-1', 'text-xs');
            break;
          case 'sm':
            expect(button).toHaveClass('px-3', 'py-1.5', 'text-sm');
            break;
          case 'md':
            expect(button).toHaveClass('px-4', 'py-2', 'text-sm');
            break;
          case 'lg':
            expect(button).toHaveClass('px-6', 'py-3', 'text-base');
            break;
          case 'xl':
            expect(button).toHaveClass('px-8', 'py-4', 'text-lg');
            break;
        }
      });
    });
  });

  // State tests
  describe('States', () => {
    it('handles disabled state correctly', () => {
      const handleClick = vi.fn();
      render(<Button disabled onClick={handleClick}>Disabled</Button>);

      const button = screen.getByRole('button');
      expect(button).toBeDisabled();
      expect(button).toHaveAttribute('aria-disabled', 'true');

      fireEvent.click(button);
      expect(handleClick).not.toHaveBeenCalled();
    });

    it('handles loading state correctly', () => {
      const handleClick = vi.fn();
      render(<Button loading onClick={handleClick}>Loading</Button>);

      const button = screen.getByRole('button');
      expect(button).toBeDisabled();
      expect(button).toHaveAttribute('aria-busy', 'true');
      expect(screen.getByLabelText('Loading')).toBeInTheDocument();

      fireEvent.click(button);
      expect(handleClick).not.toHaveBeenCalled();
    });

    it('hides icons when loading', () => {
      const leftIcon = <span data-testid="left-icon">←</span>;
      const rightIcon = <span data-testid="right-icon">→</span>;

      render(
        <Button loading leftIcon={leftIcon} rightIcon={rightIcon}>
          Loading
        </Button>
      );

      expect(screen.queryByTestId('left-icon')).not.toBeInTheDocument();
      expect(screen.queryByTestId('right-icon')).not.toBeInTheDocument();
    });

    it('shows loading spinner with correct size', () => {
      render(<Button loading size="sm">Loading</Button>);
      const spinner = screen.getByLabelText('Loading');
      expect(spinner).toBeInTheDocument();
    });
  });

  // Interaction tests
  describe('Interactions', () => {
    it('handles click events', () => {
      const handleClick = vi.fn();
      render(<Button onClick={handleClick}>Click me</Button>);

      const button = screen.getByRole('button');
      fireEvent.click(button);

      expect(handleClick).toHaveBeenCalledTimes(1);
    });

    it('prevents click when disabled', () => {
      const handleClick = vi.fn();
      render(<Button disabled onClick={handleClick}>Disabled</Button>);

      const button = screen.getByRole('button');
      fireEvent.click(button);

      expect(handleClick).not.toHaveBeenCalled();
    });

    it('prevents click when loading', () => {
      const handleClick = vi.fn();
      render(<Button loading onClick={handleClick}>Loading</Button>);

      const button = screen.getByRole('button');
      fireEvent.click(button);

      expect(handleClick).not.toHaveBeenCalled();
    });
  });

  // Polymorphic tests
  describe('Polymorphic behavior', () => {
    it('renders as different HTML elements', () => {
      const { rerender } = render(<Button as="div">Div Button</Button>);
      expect(screen.getByText('Div Button').tagName).toBe('DIV');

      rerender(<Button as="span">Span Button</Button>);
      expect(screen.getByText('Span Button').tagName).toBe('SPAN');
    });

    it('renders as link with href', () => {
      render(<Button as="a" href="/test">Link Button</Button>);
      const link = screen.getByRole('link');
      expect(link).toHaveAttribute('href', '/test');
    });

    it('handles disabled link correctly', () => {
      render(<Button as="a" href="/test" disabled>Disabled Link</Button>);
      const link = screen.getByRole('link');
      expect(link).toHaveAttribute('aria-disabled', 'true');
      expect(link).toHaveAttribute('tabIndex', '-1');
    });

    it('preserves button type for button elements', () => {
      render(<Button type="submit">Submit</Button>);
      const button = screen.getByRole('button');
      expect(button).toHaveAttribute('type', 'submit');
    });

    it('defaults to button type for button elements', () => {
      render(<Button>Default</Button>);
      const button = screen.getByRole('button');
      expect(button).toHaveAttribute('type', 'button');
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('has proper ARIA attributes', () => {
      render(<Button>Accessible Button</Button>);
      const button = screen.getByRole('button');
      expect(button).toHaveAttribute('aria-disabled', 'false');
      expect(button).toHaveAttribute('aria-busy', 'false');
    });

    it('has proper ARIA attributes when disabled', () => {
      render(<Button disabled>Disabled Button</Button>);
      const button = screen.getByRole('button');
      expect(button).toHaveAttribute('aria-disabled', 'true');
    });

    it('has proper ARIA attributes when loading', () => {
      render(<Button loading>Loading Button</Button>);
      const button = screen.getByRole('button');
      expect(button).toHaveAttribute('aria-busy', 'true');
    });

    it('has proper focus management', () => {
      render(<Button>Focusable Button</Button>);
      const button = screen.getByRole('button');

      button.focus();
      expect(button).toHaveFocus();
    });

    it('marks icons as decorative', () => {
      const icon = <span data-testid="icon">★</span>;
      render(<Button leftIcon={icon}>With Icon</Button>);

      const iconElement = screen.getByTestId('icon').parentElement;
      expect(iconElement).toHaveAttribute('aria-hidden', 'true');
    });
  });

  // Button Group tests
  describe('Button.Group', () => {
    it('renders button group correctly', () => {
      render(
        <Button.Group>
          <Button>First</Button>
          <Button>Second</Button>
        </Button.Group>
      );

      const group = screen.getByRole('group');
      expect(group).toBeInTheDocument();
      expect(group).toHaveClass('inline-flex');
    });

    it('applies horizontal orientation correctly', () => {
      render(
        <Button.Group orientation="horizontal">
          <Button>First</Button>
          <Button>Second</Button>
        </Button.Group>
      );

      const group = screen.getByRole('group');
      expect(group).toHaveClass('flex-row');
    });

    it('applies vertical orientation correctly', () => {
      render(
        <Button.Group orientation="vertical">
          <Button>First</Button>
          <Button>Second</Button>
        </Button.Group>
      );

      const group = screen.getByRole('group');
      expect(group).toHaveClass('flex-col');
    });

    it('applies spacing correctly', () => {
      render(
        <Button.Group spacing="lg">
          <Button>First</Button>
          <Button>Second</Button>
        </Button.Group>
      );

      const group = screen.getByRole('group');
      expect(group).toHaveClass('space-x-6');
    });

    it('handles attached buttons correctly', () => {
      render(
        <Button.Group attached>
          <Button>First</Button>
          <Button>Second</Button>
        </Button.Group>
      );

      const group = screen.getByRole('group');
      expect(group).toHaveClass('[&>*:not(:first-child)]:rounded-l-none');
    });
  });

  // Performance tests
  describe('Performance', () => {
    it('memoizes click handler correctly', () => {
      const handleClick = vi.fn();
      const { rerender } = render(<Button onClick={handleClick}>Test</Button>);

      const button = screen.getByRole('button');
      fireEvent.click(button);
      expect(handleClick).toHaveBeenCalledTimes(1);

      // Rerender with same props should not create new handler
      rerender(<Button onClick={handleClick}>Test</Button>);
      fireEvent.click(button);
      expect(handleClick).toHaveBeenCalledTimes(2);
    });
  });

  // Edge cases
  describe('Edge cases', () => {
    it('handles empty children', () => {
      render(<Button></Button>);
      const button = screen.getByRole('button');
      expect(button).toBeInTheDocument();
    });

    it('handles null/undefined props gracefully', () => {
      render(<Button leftIcon={null} rightIcon={undefined}>Test</Button>);
      const button = screen.getByRole('button');
      expect(button).toBeInTheDocument();
    });

    it('combines multiple CSS classes correctly', () => {
      render(
        <Button
          className="custom-class"
          variant="primary"
          size="lg"
          fullWidth
        >
          Test
        </Button>
      );

      const button = screen.getByRole('button');
      expect(button).toHaveClass('custom-class', 'bg-primary-600', 'px-6', 'py-3', 'w-full');
    });
  });
});

  // Variant tests
  describe('Variants', () => {
    it.each([
      ['primary', 'bg-blue-600'],
      ['secondary', 'bg-gray-200'],
      ['ghost', 'text-gray-700'],
      ['danger', 'bg-red-600'],
      ['success', 'bg-green-600'],
      ['warning', 'bg-yellow-600'],
    ])('renders %s variant correctly', (variant, expectedClass) => {
      render(<Button variant={variant as any}>Test</Button>);
      const button = screen.getByRole('button');
      expect(button).toHaveClass(expectedClass);
    });
  });

  // Size tests
  describe('Sizes', () => {
    it.each([
      ['xs', 'px-2 py-1 text-xs'],
      ['sm', 'px-3 py-1.5 text-sm'],
      ['md', 'px-4 py-2 text-sm'],
      ['lg', 'px-6 py-3 text-base'],
      ['xl', 'px-8 py-4 text-lg'],
    ])('renders %s size correctly', (size, expectedClasses) => {
      render(<Button size={size as any}>Test</Button>);
      const button = screen.getByRole('button');
      expectedClasses.split(' ').forEach(cls => {
        expect(button).toHaveClass(cls);
      });
    });
  });

  // State tests
  describe('States', () => {
    it('renders disabled state correctly', () => {
      render(<Button disabled>Disabled</Button>);
      const button = screen.getByRole('button');
      expect(button).toBeDisabled();
      expect(button).toHaveClass('opacity-50', 'cursor-not-allowed');
    });

    it('renders loading state correctly', () => {
      render(<Button loading>Loading</Button>);
      const button = screen.getByRole('button');
      expect(button).toBeDisabled();
      expect(button).toHaveAttribute('aria-busy', 'true');
      expect(screen.getByRole('status')).toBeInTheDocument(); // LoadingSpinner
    });

    it('renders full width correctly', () => {
      render(<Button fullWidth>Full Width</Button>);
      const button = screen.getByRole('button');
      expect(button).toHaveClass('w-full');
    });
  });

  // Icon tests
  describe('Icons', () => {
    it('renders left icon correctly', () => {
      const LeftIcon = () => <span data-testid="left-icon">←</span>;
      render(<Button leftIcon={<LeftIcon />}>With Left Icon</Button>);

      expect(screen.getByTestId('left-icon')).toBeInTheDocument();
      expect(screen.getByText('With Left Icon')).toBeInTheDocument();
    });

    it('renders right icon correctly', () => {
      const RightIcon = () => <span data-testid="right-icon">→</span>;
      render(<Button rightIcon={<RightIcon />}>With Right Icon</Button>);

      expect(screen.getByTestId('right-icon')).toBeInTheDocument();
      expect(screen.getByText('With Right Icon')).toBeInTheDocument();
    });

    it('hides icons when loading', () => {
      const LeftIcon = () => <span data-testid="left-icon">←</span>;
      const RightIcon = () => <span data-testid="right-icon">→</span>;

      render(
        <Button loading leftIcon={<LeftIcon />} rightIcon={<RightIcon />}>
          Loading
        </Button>
      );

      expect(screen.queryByTestId('left-icon')).not.toBeInTheDocument();
      expect(screen.queryByTestId('right-icon')).not.toBeInTheDocument();
      expect(screen.getByRole('status')).toBeInTheDocument(); // LoadingSpinner
    });
  });

  // Interaction tests
  describe('Interactions', () => {
    it('handles click events', () => {
      const handleClick = vi.fn();
      render(<Button onClick={handleClick}>Click me</Button>);

      fireEvent.click(screen.getByRole('button'));
      expect(handleClick).toHaveBeenCalledTimes(1);
    });

    it('does not call onClick when disabled', () => {
      const handleClick = vi.fn();
      render(<Button disabled onClick={handleClick}>Disabled</Button>);

      fireEvent.click(screen.getByRole('button'));
      expect(handleClick).not.toHaveBeenCalled();
    });

    it('does not call onClick when loading', () => {
      const handleClick = vi.fn();
      render(<Button loading onClick={handleClick}>Loading</Button>);

      fireEvent.click(screen.getByRole('button'));
      expect(handleClick).not.toHaveBeenCalled();
    });
  });

  // Polymorphic tests
  describe('Polymorphic rendering', () => {
    it('renders as anchor when as="a"', () => {
      render(
        <Button as="a" href="/test">
          Link Button
        </Button>
      );

      const link = screen.getByRole('link');
      expect(link).toBeInTheDocument();
      expect(link).toHaveAttribute('href', '/test');
      expect(link).not.toHaveAttribute('type');
      expect(link).not.toHaveAttribute('disabled');
    });

    it('renders as div when as="div"', () => {
      render(<Button as="div">Div Button</Button>);

      const div = screen.getByText('Div Button');
      expect(div.tagName).toBe('DIV');
      expect(div).not.toHaveAttribute('type');
    });

    it('handles click events on polymorphic elements', () => {
      const handleClick = vi.fn();
      render(
        <Button as="div" onClick={handleClick}>
          Div Button
        </Button>
      );

      fireEvent.click(screen.getByText('Div Button'));
      expect(handleClick).toHaveBeenCalledTimes(1);
    });

    it('respects disabled state on polymorphic elements', () => {
      const handleClick = vi.fn();
      render(
        <Button as="div" disabled onClick={handleClick}>
          Disabled Div
        </Button>
      );

      const div = screen.getByText('Disabled Div');
      expect(div).toHaveAttribute('aria-disabled', 'true');

      fireEvent.click(div);
      expect(handleClick).not.toHaveBeenCalled();
    });
  });

  // Accessibility tests
  describe('Accessibility', () => {
    it('has proper ARIA attributes', () => {
      render(<Button>Accessible Button</Button>);
      const button = screen.getByRole('button');

      expect(button).toHaveAttribute('type', 'button');
      expect(button).not.toHaveAttribute('aria-busy');
    });

    it('has proper ARIA attributes when loading', () => {
      render(<Button loading>Loading Button</Button>);
      const button = screen.getByRole('button');

      expect(button).toHaveAttribute('aria-busy', 'true');
    });

    it('is keyboard accessible', () => {
      const handleClick = vi.fn();
      render(<Button onClick={handleClick}>Keyboard Button</Button>);

      const button = screen.getByRole('button');
      button.focus();
      expect(button).toHaveFocus();

      fireEvent.keyDown(button, { key: 'Enter' });
      // Note: Enter key handling is browser default behavior
    });
  });

  // Button Group tests
  describe('Button.Group', () => {
    it('renders button group correctly', () => {
      render(
        <Button.Group>
          <Button>First</Button>
          <Button>Second</Button>
          <Button>Third</Button>
        </Button.Group>
      );

      const group = screen.getByRole('group');
      expect(group).toBeInTheDocument();
      expect(group).toHaveClass('inline-flex', 'flex-row');

      expect(screen.getByText('First')).toBeInTheDocument();
      expect(screen.getByText('Second')).toBeInTheDocument();
      expect(screen.getByText('Third')).toBeInTheDocument();
    });

    it('renders vertical orientation correctly', () => {
      render(
        <Button.Group orientation="vertical">
          <Button>First</Button>
          <Button>Second</Button>
        </Button.Group>
      );

      const group = screen.getByRole('group');
      expect(group).toHaveClass('flex-col');
    });

    it('renders attached buttons correctly', () => {
      render(
        <Button.Group attached>
          <Button>First</Button>
          <Button>Second</Button>
          <Button>Third</Button>
        </Button.Group>
      );

      const group = screen.getByRole('group');
      expect(group).toHaveClass('[&>*:not(:first-child)]:rounded-l-none');
      expect(group).toHaveClass('[&>*:not(:last-child)]:rounded-r-none');
    });

    it('applies spacing correctly', () => {
      render(
        <Button.Group spacing="lg">
          <Button>First</Button>
          <Button>Second</Button>
        </Button.Group>
      );

      const group = screen.getByRole('group');
      expect(group).toHaveClass('space-x-6');
    });
  });

  // Constants tests
  describe('Constants', () => {
    it('exports variants correctly', () => {
      expect(Button.variants).toEqual([
        'primary',
        'secondary',
        'ghost',
        'danger',
        'success',
        'warning'
      ]);
    });

    it('exports sizes correctly', () => {
      expect(Button.sizes).toEqual(['xs', 'sm', 'md', 'lg', 'xl']);
    });
  });
});

